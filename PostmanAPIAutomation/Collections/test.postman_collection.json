{
	"info": {
		"_postman_id": "406f2a3f-70e7-458b-817b-548490ced122",
		"name": "test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39014971"
	},
	"item": [
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"timestamp\", Date.now());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created and token received\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Check if token is present in the response\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"user_{{timestamp}}\", \"password\": \"test\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/signup",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user(Negative flow)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"timestamp\", Date.now());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created and token received\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Check if token is present in the response\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"user_{{timestamp}}\", \"password\": \"test\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/signup",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User login and token received\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Check if token is present in the response\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
							"\r",
							"    // Optionally store token for later use\r",
							"    pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"rasika1\",\r\n\"password\":\"test\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/login",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has id, text, userId\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // id should be a number > 0\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.id).to.be.above(0);\r",
							"\r",
							"    // text should be same as what was sent\r",
							"    pm.expect(jsonData.text).to.eql(\"test14\");\r",
							"\r",
							"    // userId should exist and be a number\r",
							"    pm.expect(jsonData).to.have.property(\"userId\");\r",
							"    pm.expect(jsonData.userId).to.be.a(\"number\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authtoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"text\": \"test14\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/items",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"const expectedText = pm.environment.get(\"item_text\");\r",
							"\r",
							"const itemFound = responseData.some(item => item.text === expectedText);\r",
							"\r",
							"pm.test(`Item with text \"${expectedText}\" exists in response`, function () {\r",
							"  pm.expect(itemFound).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authtoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/items",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify 200 status code\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Verify item deleted text in response\",function(){\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.be.eql(\"Item deleted successfully\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authtoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BASE_URL}}/items/4",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"items",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedStatus = parseInt(pm.iterationData.get(\"expected_status\"));\r",
							"const newText = pm.iterationData.get(\"new_text\");\r",
							"\r",
							"pm.test(\"Verify expected status code\", function () {\r",
							"    pm.response.to.have.status(expectedStatus);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Verify item text is updated\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"text\", newText);\r",
							"        pm.expect(jsonData).to.have.property(\"id\");\r",
							"    });\r",
							"\r",
							"    pm.test(\"Verify item ID matches the URL\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        const itemId = parseInt(pm.iterationData.get(\"item_id\"));\r",
							"        pm.expect(jsonData.id).to.eql(itemId);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Verify error message if applicable\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authtoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{new_text}}\"\r\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/items/9",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"items",
						"9"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "authtoken",
			"value": ""
		}
	]
}